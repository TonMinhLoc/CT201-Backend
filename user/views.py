from django.shortcuts import render
from dj_rest_auth.registration.views import RegisterView
from dj_rest_auth.views import LoginView
from .serializers import StudentRegisterSerializer
from rest_framework.response import Response
from rest_framework import status
from .models import Teacher, Manager, Student
from rest_framework.decorators import api_view


class StudentRegisterView(RegisterView):
    serializer_class = StudentRegisterSerializer
    http_method_names = ['post']

    def create(self, request, *args, **kwargs):
        print("üìå Received Data:", request.data)  # Debug request data
        
        try:
            response = super().create(request, *args, **kwargs)
            print("‚úÖ Response Data:", response.data)  # Debug response data
            return response
        except Exception as e:
            # N·∫øu c√≥ l·ªói, log l·ªói ra console
            print("‚ùå Error creating student:", str(e))

            # N·∫øu request.data kh√¥ng h·ª£p l·ªá, hi·ªÉn th·ªã l·ªói chi ti·∫øt
            if hasattr(e, 'detail'):
                error_detail = e.detail
            else:
                error_detail = {"error": "C√≥ l·ªói x·∫£y ra, vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu!"}

            return Response({"status": "error", "message": error_detail}, status=status.HTTP_400_BAD_REQUEST)



class ManagerLoginView(LoginView):
    def get_response(self):
        # G·ªçi ph∆∞∆°ng th·ª©c cha ƒë·ªÉ l·∫•y response m·∫∑c ƒë·ªãnh
        response = super().get_response()

        user = self.user  # L·∫•y ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ request
        
        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† Manager kh√¥ng
        if Manager.objects.filter(user=user).exists():
            return Response(response.data, status=status.HTTP_200_OK)
        else:
            # Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói khi ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† Manager
            response.data = {
                "message": "Login failed: You are not a manager."
            }
            return Response(response.data, status=status.HTTP_401_UNAUTHORIZED)
            

class CustomLoginView(LoginView):
    def get_response(self):
        # G·ªçi ph∆∞∆°ng th·ª©c cha ƒë·ªÉ l·∫•y response m·∫∑c ƒë·ªãnh
        response = super().get_response()

        user = self.user  # L·∫•y ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ request
        
        requested_role = self.request.data.get('role', None)  # L·∫•y vai tr√≤ y√™u c·∫ßu t·ª´ request

        # X√°c ƒë·ªãnh vai tr√≤ th·ª±c t·∫ø c·ªßa ng∆∞·ªùi d√πng
        if Teacher.objects.filter(user=user).exists():
            actual_role = 'teacher'
        elif Manager.objects.filter(user=user).exists():
            actual_role = 'manager'
        elif Student.objects.filter(user=user).exists():
            actual_role = 'student'
        else:
            actual_role = 'unknown'

        # Ki·ªÉm tra n·∫øu vai tr√≤ y√™u c·∫ßu kh√¥ng kh·ªõp v·ªõi vai tr√≤ th·ª±c t·∫ø ho·∫∑c n·∫øu vai tr√≤ y√™u c·∫ßu l√† None
        if requested_role is None or requested_role != actual_role:
            response.data = {
                'error': f'Login failed: The requested role "{requested_role}" does not match the actual role "{actual_role}".'
            }
            return Response(response.data, status=status.HTTP_401_UNAUTHORIZED)

        # N·∫øu vai tr√≤ kh·ªõp, tr·∫£ v·ªÅ th√¥ng tin v·ªõi vai tr√≤ th·ª±c t·∫ø
        response.data['role'] = actual_role
        return Response(response.data, status=status.HTTP_200_OK)
@api_view(['GET'])
def get_students(request):
    students = Student.objects.all()
    students_info = []
    for student in students:
        user = student.user
        students_info.append({
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name
        })
    return Response(students_info)

@api_view(['GET'])
def get_teachers(request):
    teachers = Teacher.objects.all()
    teachers_info = []
    for teacher in teachers:
        user = teacher.user
        teachers_info.append({
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name
        })
    return Response(teachers_info)

        

